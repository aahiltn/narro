generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  classSections StudentClassSection[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model StudentClassSection {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  student         Student      @relation(fields: [studentId], references: [id])
  studentId       String       @db.ObjectId
  classSection    ClassSection @relation(fields: [classSectionId], references: [id])
  classSectionId  String       @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([studentId, classSectionId])
}

model ClassSection {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  sectionNumber String
  students      StudentClassSection[]
  teacher       Teacher?   @relation(fields: [teacherId], references: [id])
  teacherId     String?    @db.ObjectId
  units         Unit[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Teacher {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  sections     ClassSection[]
  units        Unit[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Question {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  image     String?   // URL or path to image
  prompt    String
  timeLimit DateTime?
  exam      Exam?     @relation(fields: [examId], references: [id])
  examId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Exam {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  questions Question[]
  timeLimit DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  unit      Unit       @relation(fields: [unitId], references: [id])
  unitId    String     @db.ObjectId
}

model Unit {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  keywords      String[]
  classSection  ClassSection? @relation(fields: [classSectionId], references: [id])
  classSectionId String?      @db.ObjectId
  teacher       Teacher?      @relation(fields: [teacherId], references: [id])
  teacherId     String?       @db.ObjectId
  language      String
  teacherNotes  String
  exams         Exam[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
} 